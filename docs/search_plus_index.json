{"./":{"url":"./","title":"Introduction","keywords":"","body":"Java Lab Starting With Java "},"JavaLabMoney.html":{"url":"JavaLabMoney.html","title":"Java Lab Object","keywords":"","body":"Java Lab Object Chapter 6 Lab Programming Money.java package JavaLabMoney; // Objects represent nonnegative amounts of money public class Money { private long dollars; //A number of dollars private long cents; //A number of cents //Constructor creates a Money object using the amount of money in //dollars and cents represented with a decimal number public Money(double amount) { if (amount amount.dollars) { value = 1; } else if (this.cents amount.cents) { value = 1; } else { value = 0; } return value; } // Write and document an equals method. // The method compares the instance // variables of the calling object with instance // variables of the parameter object for // equality and returns true if the dollars and the cents of the calling // object are the same as the dollars and the cents of the parameter object. // Otherwise, it returns false. public boolean equals(Money otherObject) { if ((this.dollars == otherObject.dollars) && (this.cents == otherObject.cents)) { return true; } else { return false; } } // Write and document a toString method. // This method will return a String that looks like money, // including the dollar sign. // Remember that if you have less than 10 cents, // you will need to put a 0 before printing the cents so // that it appears correctly with 2 decimal places. public String toString() { if (this.cents CreditCard.java package JavaLabMoney; // I will create my CreditCard file. // It should have data fields that include an owner of type Person, // a balance of type Money, and a creditLimit of type Money. public class CreditCard { private Money balance; private Money creditLimit; private Person owner; // It should have a constructor that has two parameter public CreditCard(Person owner, Money creditLimit) { this.creditLimit = creditLimit; this.owner = owner; // The balance can be initialized to a Money value of zero this.balance = new Money(0); } // It should have accessor methods to get the balance and the available credit. // Since these are objects (pass by reference), we donâ€™t want to create an insecure // credit card by passing out addresses to components in our credit card, // so we must return a new object with the same values. public Money getBalance() { return new Money(balance); } public Money getCreditLimit() { return new Money(creditLimit); } // It should have an accessor method to get the // information about the owner, but in the form of a String that can be printed out. // This can be done by calling the toString method for the owner. public String getPersonals() { return owner.toString(); } // It should have a method that will charge to the credit card by adding // the amount of Money in the parameter to the balance if it will not exceed the credit limit. public void charge(Money amount) { if (balance.add(amount).compareTo(creditLimit) Address.java package JavaLabMoney; //Defines an address using a street, city, state, and zipcode public class Address { //The street number and street name private String street; //The city in which the address is located private String city; //The state in which the address is located private String state; //The zip code associated with that city and street private String zip; //Constructor creates an address using four parameters //road describes the street number and name //town describes the city //st describes the state //zipCode describes the zip code public Address(String road, String town, String st, String zipCode) { street = road; city = town; state = st; zip = zipCode; } //toString method returns information about the address public String toString() { return (street + \", \" + city + \", \" + state + \" \" + zip); } } Person.java package JavaLabMoney; //Defines a person by name and address public class Person { //The person's last name private String lastName; //The person's first name private String firstName; //The person's address private Address home; //Constructor creates a person from a last name, //first name, and address public Person(String last, String first, Address residence) { lastName = last; firstName = first; home = residence; } //toString method returns information about the person public String toString() { return(firstName + \" \" + lastName + \", \" + home.toString()); } } MoneyDriver.java package JavaLabMoney; //This program tests the money class. public class MoneyDriver { //This is a driver for testing the class public static void main(String[] args) { final int BEGINNING = 500; final Money FIRST_AMOUNT = new Money(10.02); final Money SECOND_AMOUNT = new Money(10.02); final Money THIRD_AMOUNT = new Money(10.88); Money balance = new Money(BEGINNING); System.out.println(\"The current amount is \" + balance.toString()); balance = balance.add(SECOND_AMOUNT); System.out.println(\"Adding \" + SECOND_AMOUNT + \" gives \" + balance.toString()); balance = balance.subtract(THIRD_AMOUNT); System.out.println(\"Subtracting \" + THIRD_AMOUNT + \" gives \" + balance.toString()); boolean equal = SECOND_AMOUNT.equals(FIRST_AMOUNT); if(equal) System.out.println(SECOND_AMOUNT + \" equals \" + FIRST_AMOUNT); else System.out.println(SECOND_AMOUNT + \" does not equal \" + FIRST_AMOUNT); equal = THIRD_AMOUNT.equals(FIRST_AMOUNT); if(equal) System.out.println(THIRD_AMOUNT + \" equals \" + FIRST_AMOUNT); else System.out.println(THIRD_AMOUNT + \" does not equal \" + FIRST_AMOUNT); } } CreditCardDemo.java package JavaLabMoney; //Demonstrates the CreditCard class public class CreditCardDemo { public static void main(String[] args) { final Money LIMIT = new Money(1000); final Money FIRST_AMOUNT = new Money(200); final Money SECOND_AMOUNT = new Money(10.02); final Money THIRD_AMOUNT = new Money(25); final Money FOURTH_AMOUNT = new Money(990); Person owner = new Person(\"Christie\", \"Diane\", new Address(\"237J Harvey Hall\", \"Menomonie\", \"WI\", \"54751\")); CreditCard visa = new CreditCard(owner, LIMIT); System.out.println(visa.getPersonals()); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Credit Limit: \" + visa.getCreditLimit()); System.out.println(); System.out.println(\"Attempt to charge \" + FIRST_AMOUNT); visa.charge(FIRST_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to charge \" + SECOND_AMOUNT); visa.charge(SECOND_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to pay \" + THIRD_AMOUNT); visa.payment(THIRD_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to charge \" + FOURTH_AMOUNT); visa.charge(FOURTH_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); } } "},"JavaLabArray.html":{"url":"JavaLabArray.html","title":"Java Lab Array","keywords":"","body":"Java Lab Array Chapter 7 Lab Programming Average.java package JavaLabArray; import java.util.Arrays; import java.util.Scanner; public class Average { // This class will allow a user to enter 5 scores into an array // The array which will contain the scores private int[] data; // The arithmetic average of the scores private double mean; // The constructor will allocate memory for the array. // Use a for loop to repeatedly display // a prompt for the user which should indicate that use. // The constructor will then call the selectionSort and the calculateMean methods. public Average() { this.data = new int[5]; Scanner scanner = new Scanner(System.in); for (int i = 0; i this.data[maxIndex]) { // Swap the index of found maximum number with the index of assumed maximum number maxIndex = unsortedIndex; } } // Swap the found maximum number with boundary number int temp; temp = this.data[maxIndex]; this.data[maxIndex] = this.data[boundary]; this.data[boundary] = temp; } } } AverageDriver.java package JavaLabArray; //I will create my AverageDriver file. It only contains the main method. //The main method should declare and instantiate an Average object. // The Average object information should then be printed to the console. public class AverageDriver { public static void main(String[] args) { var average = new Average(); average.calculateMean(); average.selectionSort(); System.out.println(average.toStrong()); } } CompactDisc.java package JavaLabArray; //This program creates a list of songs for a CD by reading from a file import java.io.*; public class CompactDisc { public static void main(String[] args) throws IOException { // This is relative paths. // You would also use absolute paths. FileReader file = new FileReader(\"src/JavaLabArray/Classics.txt\"); BufferedReader input = new BufferedReader(file); String title; String artist; //Declare an array of songs, called cd, of size 6. Song [] cd = new Song[6]; for (int i = 0; i Song.java package JavaLabArray; public class Song { private String title; private String artist; public Song(String title, String artist) { this.title = title; this.artist = artist; } public String toString() { return title + \" by \" + artist + \"\\n\"; } } Classics.txt Ode to Joy Bach The Sleeping Beauty Tchaikovsky Lullaby Brahms Canon Bach Symphony No. 5 Beethoven The Blue Danube Waltz Strauss "}}