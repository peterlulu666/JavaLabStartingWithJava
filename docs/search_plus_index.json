{"./":{"url":"./","title":"Introduction","keywords":"","body":"Java Lab Starting With Java "},"JavaLabIfAndSwitchStatement.html":{"url":"JavaLabIfAndSwitchStatement.html","title":"Java Lab If And Switch Statement","keywords":"","body":"Java Lab If And Switch Statement Chapter 5 Lab Programming DiceSimulation.java package JavaLabIfAndSwitchStatement; //This program allows the user to order a pizza import java.util.Scanner; //TASK #5 add an import statement to use the DecimalFormat class import java.text.DecimalFormat; public class PizzaOrder { public static void main(String[] args) { // TASK #5 Create a DecimalFormat object with 2 decimal places // Create a DecimalFormat object that always shows 2 decimal places. DecimalFormat decimalFormat = new DecimalFormat(\"#0.00\"); //Create a Scanner object to read input Scanner keyboard = new Scanner(System.in); //Create an instance of a Pizza Pizza order = new Pizza(); String firstName; //user's first name boolean discount = false;//flag, true if user is eligible for discount int inches; //size of the pizza char crustType; //type of crust double cost; //cost of the pizza final double TAX_RATE = .08;//sales tax rate double tax; //amount of tax char choice; //user's choice String input; //user input String toppings = \"Cheese \";//list of toppings int numberOfToppings = 0; //number of toppings //prompt user and get first name System.out.println(\"Welcome to Mike and Diane's Pizza\"); System.out.print(\"Enter your first name: \"); firstName = keyboard.nextLine(); // determine if user is eligible for discount by // having the same first name as one of the owners // ADD LINES HERE FOR TASK #1 // The condition will compare the String input by the user as his/her first name with the first names of // the owners, Mike and Diane. // Be sure that the comparison is not case sensitive. if (firstName.equals(\"Mike\") || firstName.equals(\"mike\") || firstName.equals(\"Diane\") || firstName.equals(\"diane\")){ discount = true; } //prompt user and get pizza size choice System.out.println(\"Pizza Size (inches) Cost\"); System.out.println(\" 10 $10.99\"); System.out.println(\" 12 $12.99\"); System.out.println(\" 14 $14.99\"); System.out.println(\" 16 $16.99\"); System.out.println(\"What size pizza would you like?\"); System.out.print(\"10, 12, 14, or 16 (enter the number only): \"); inches = keyboard.nextInt(); //set price and size of pizza ordered //ADD LINES HER FOR TASK #2 // Write an if-else-if statement that lets the computer // choose which statements to execute by the user input size. if (inches == 10){ // A call to the setSize method passing in the size indicated. order.setSize(10); // A call to the setCost method passing in the appropriate adjustment. // Notice that in the Pizza.java program, the constructor creates a 12 inch Hand-tossed pizza for $12.99. // The setCost method adjusts the cost, so a 10 inch pizza will need its cost decreased by 2, // while the 16 inch pizza cost will need to increase by 4. // The price is starting with 12.99. order.setCost(-2); } else if (inches == 12){ order.setSize(12); // The price is starting with 12.99. order.setCost(0); } else if (inches == 14){ order.setSize(14); // The price is starting with 12.99. order.setCost(2); } else if (inches == 16){ order.setSize(16); // The price is starting with 12.99. order.setCost(4); } // The default else of the above if-else-if statement should print a statement that // the user input was not one of the choices, so a 12 inch pizza will be made. else { System.out.println(\"The user input was not one of the choices, so a 12 inch pizza will be made\"); order.setSize(12); order.setCost(0); } //consume the remaining newline character keyboard.nextLine(); //prompt user and get crust choice System.out.println(\"What type of crust do you want? \"); System.out.print(\"(H)Hand-tossed, (T) Thin-crust, or \" + \"(D) Deep-dish (enter H, T, or D): \"); input = keyboard.nextLine(); crustType = input.charAt(0); //set user's crust choice on pizza ordered //ADD LINES FOR TASK #3 // Write a switch statement that compares the user’s choice with // the appropriate characters (make sure that both capital letters and small letters will work). switch (crustType){ // Each case will call the setCrust method passing in the appropriate String indicating crust type. case 'H', 'h' -> order.setCrust(\"Hand-tossed\"); case 'T', 't' -> order.setCrust(\"Thin-crust\"); case 'D', 'd' -> order.setCrust(\"Deep-dish\"); // The default case will print a statement that // the user input was not one of the choices, so a Hand-tossed crust will be made. default -> { System.out.println(\"The user input was not one of the choices, so a Hand-tossed crust will be made\"); order.setCrust(\"Hand-tossed\"); } } //prompt user and get topping choices one at a time System.out.println(\"All pizzas come with cheese.\"); System.out.println(\"Additional toppings are $1.25 each,\" + \" choose from\"); System.out.println(\"Pepperoni, Sausage, Onion, Mushroom\"); //if topping is desired, //add to topping list and number of toppings System.out.print(\"Do you want Pepperoni? (Y/N): \"); input = keyboard.nextLine(); choice = input.charAt(0); if (choice == 'Y' || choice == 'y') { numberOfToppings += 1; toppings = toppings + \"Pepperoni \"; } System.out.print(\"Do you want Sausage? (Y/N): \"); input = keyboard.nextLine(); choice = input.charAt(0); if (choice == 'Y' || choice == 'y') { numberOfToppings += 1; toppings = toppings + \"Sausage \"; } System.out.print(\"Do you want Onion? (Y/N): \"); input = keyboard.nextLine(); choice = input.charAt(0); if (choice == 'Y' || choice == 'y') { numberOfToppings += 1; toppings = toppings + \"Onion \"; } System.out.print(\"Do you want Mushroom? (Y/N): \"); input = keyboard.nextLine(); choice = input.charAt(0); if (choice == 'Y' || choice == 'y') { numberOfToppings += 1; toppings = toppings + \"Mushroom \"; } //set number of toppings and topping list on pizza ordered order.setNumToppings(numberOfToppings); order.setToppingList(toppings); //add additional toppings cost to cost of pizza order.setCost(1.25 * numberOfToppings); //display order confirmation System.out.println(); System.out.println(\"Your order is as follows: \"); System.out.println(order.getSize() + \" inch pizza\"); System.out.println(order.getCrust() + \" crust\"); System.out.println(order.getToppingList()); //apply discount if user is elibible //ADD LINES FOR TASK #4 HERE // Write an if statement that uses the flag as the condition. // Remember that the flag is a Boolean variable, // therefore is true or false. // It does not have to be compared to anything. if (discount == true){ // A statement that prints a message indicating that the user is eligible for a $2.00 discount. System.out.println(\"The user is eligible for a $2.00 discount\"); // A statement that reduces the variable cost by 2. order.setCost(-2); } //display cost of pizza cost = order.getCost(); // EDIT PROGRAM FOR TASK #5 // SO ALL MONEY OUTPUT APPEARS WITH 2 DECIMAL PLACES // Edit the appropriate lines in the main method so that any monetary output has 2 decimal places. System.out.println(\"The cost of your order is: $\" + decimalFormat.format(cost)); //calculate and display tax and total cost tax = cost * TAX_RATE; System.out.println(\"The tax is: $\" + decimalFormat.format(tax)); System.out.println(\"The total due is: $\" + decimalFormat.format(tax + cost)); System.out.println(\"Your order will be ready\" + \" for pickup in 30 minutes.\"); } }PizzaOrder.java DiceSimulation.java package JavaLabIfAndSwitchStatement; //This program will represent a pizza public class Pizza { private double cost; //the cost of the pizza private String crust; //the type of crust private int size; //the diameter in inches private int numToppings; //the number of toppings private String toppingList; //a list of the toppings //Constructor creates a 12\" Hand-tossed pizza public Pizza() { cost = 12.99; crust = \"Hand-tossed\"; size = 12; numToppings = 0; toppingList = null; } //adds the parameter amount to the cost public void setCost(double amount) { cost += amount; } //sets the crust type public void setCrust(String type) { crust = type; } //changes the size of the pizza to the parameter diameter public void setSize(int diameter) { size = diameter; } //sets the number of toppings to the parameter number public void setNumToppings(int number) { numToppings = number; } //sets the list of toppings public void setToppingList(String newTopping) { toppingList = newTopping; } //returns the cost of the pizza public double getCost() { return cost; } //returns the crust type public String getCrust() { return crust; } //returns the size of the pizza public int getSize() { return size; } //returns the number of toppings public int getNumToppings() { return numToppings; } //returns the list of toppings public String getToppingList() { return toppingList; } }Pizza.java "},"JavaLabWhileLoop.html":{"url":"JavaLabWhileLoop.html","title":"Java Lab While Loop","keywords":"","body":"Java Lab While Loop Chapter 5 Lab Programming DiceSimulation.java package JavaLabWhileLoop; // This class simulates rolling a pair of dice 10,000 times and // counts the number of times doubles of are rolled for each different // pair of doubles. public class DiceSimulation { public static void main(String[] args) { // You will be modifying the DiceSimulation class only. // I have declared all the variables. // You need to add what the method does. final int NUMBER = 10000; //the number of times to roll the dice Dice die1 = new Dice(); // the first die Dice die2 = new Dice(); // the second die int die1Value; // number of spots on the first die int die2Value; // number of spots on the second die int count = 0; // number of times the dice were rolled int snakeEyes = 0; // number of times snake eyes is rolled int twos = 0; // number of times double two is rolled int threes = 0; // number of times double three is rolled int fours = 0; // number of times double four is rolled int fives = 0; // number of times double five is rolled int sixes = 0; // number of times double six is rolled //ENTER YOUR CODE FOR THE ALGORITHM HERE // You will be using several control structures: // a while loop and an if-else-if statement nested inside another if statement. while (true) { // Roll the first die die1.roll(); // Get the value of the first die // Store the value to the die1Value die1Value = die1.getSpots(); // Roll the second die die2.roll(); // Get the value of the second die // Store the value to the die2Value die2Value = die2.getSpots(); // If the value of the first die is the same as the value of the second die. if (die1Value == die2Value) { // If value of first die is 1 if (die1Value == 1) { // Increment the number of times snake eyes were rolled. snakeEyes += 1; } else if (die1Value == 2) { // If value of first die is 2 // Increment the number of times twos were rolled. twos += 1; } else if (die1Value == 3) { // If value of first die is 3 // Increment the number of times threes were rolled. threes += 1; } else if (die1Value == 4) { // If value of first die is 4 // Increment the number of times fours were rolled. fours += 1; } else if (die1Value == 5) { // If value of first die is 5 // Increment the number of times fives were rolled. fives += 1; } else if (die1Value == 6) { // If value of first die is 6 // Increment the number of times sixes were rolled. sixes += 1; } } // Increment the number of times the dice were rolled. count += 1; // Repeat while the number of dice rolls are less than // the number of times the dice should be rolled. if (count >= NUMBER) { break; } } System.out.println(\"You rolled snake eyes \" + snakeEyes + \" out of \" + count + \" rolls.\"); System.out.println(\"You rolled double twos \" + twos + \" out of \" + count + \" rolls.\"); System.out.println(\"You rolled double threes \" + threes + \" out of \" + count + \" rolls.\"); System.out.println(\"You rolled double fours \" + fours + \" out of \" + count + \" rolls.\"); System.out.println(\"You rolled double fives \" + fives + \" out of \" + count + \" rolls.\"); System.out.println(\"You rolled double sixes \" + sixes + \" out of \" + count + \" rolls.\"); } }DiceSimulation.java Dice.java package JavaLabWhileLoop; // This class simulates a fair, standard die that is used in many games. import java.util.Random;\t\t\t// to use random number generator public class Dice { private int spots; \t// the number of spots up on the die private static Random generator;// a random number generator used in // simulating rolling a dice, shared by all dice // so that it will be as random as possible. //Constructor creates a single die, initially with no spots public Dice() { generator = new Random();\t//creates an instance of the random spots = 0; } //simulates rolling the die and stores the number rolled public void roll() { spots = generator.nextInt(6) + 1;\t//returns 1,2,3,4,5,or 6 } //returns the value of the die public int getSpots() { return spots; } }Dice.java StatsDemo.java package JavaLabWhileLoop; import java.io.*; import java.text.DecimalFormat; import java.util.Scanner; public class StatsDemo { public static void main(String[] args) throws IOException { // Create a DecimalFormat object so that we can format our numbers for output with 3 decimal places. DecimalFormat decimalFormat = new DecimalFormat(\"0.000\"); // Create a Scanner object to get the file name input from the user. Scanner scanner = new Scanner(System.in); // Prompt the user and read in the file name. // The file name would be \"src/JavaLabWhileLoop/Numbers.txt\". System.out.println(\"Enter the file name: \"); String fileName = scanner.nextLine(); FileReader file = new FileReader(fileName); // Create a FileStats object passing it the file name. FileStats fileStats = new FileStats(fileName); // Create a FileWriter object passing it the filename “Results.txt”. FileWriter fileWriter = new FileWriter(\"src/JavaLabWhileLoop/Results.txt\"); // Create a PrintWriter object passing it the FileWriter object. PrintWriter printWriter = new PrintWriter(fileWriter); // Print the mean and standard deviation to the output file using a three decimal format, labeling each. System.out.println(\"Mean: \" + decimalFormat.format(fileStats.getMean()) + \"\\n\" + \"Standard Deviation: \" + decimalFormat.format(fileStats.getStdDev())); } }StatsDemo.java FileStats.java package JavaLabWhileLoop; // To calculate the statistics on a file of numbers import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.FileReader; import java.util.Scanner; public class FileStats { private double mean; //the arithmetic average private double stdDev; //the standard deviation //Constructor calls calculateMean and calculateStdDev methods //and store the results in the respective instance variables public FileStats(String filename) throws FileNotFoundException { mean = calculateMean(filename); stdDev = calculateStdDev(filename); } //returns the mean public double getMean() { return mean; } //returns the standard deviation public double getStdDev() { return stdDev; } //returns the calculated arithmetic average public double calculateMean(String filename) throws FileNotFoundException { //ADD LINES FOR TASK 4 // Create a FileReader object passing it the filename. FileReader fileReader = new FileReader(filename); // Create a BufferedReader object passing it the FileReader object. BufferedReader bufferedReader = new BufferedReader(fileReader); Scanner input = new Scanner(fileReader); // Declare local variables for an accumulator of type double, // a counter of type integer, and line of type String. // Initialize all number variables to 0. double accumulator = 0; int counter = 0; // Write a loop that continues until you are at the end of the file. while (true) { // Convert the line into a double value and add the value to the accumulator. accumulator += input.nextDouble(); // Increment the counter. counter += 1; // Read a new line from the file. if (!input.hasNext()) { break; } } // When the program exits the loop close the input file. input.close(); // The mean is calculated by dividing the accumulator by the counter. return accumulator / counter; } //returns the calculated standard deviation public double calculateStdDev(String filename) throws FileNotFoundException { //ADD LINES FOR TASK 5 // Create a FileReader object passing it the filename. FileReader fileReader = new FileReader(filename); // Create a BufferedReader object passing it the FileReader object. BufferedReader bufferedReader = new BufferedReader(fileReader); Scanner input = new Scanner(fileReader); // Declare local variables for an accumulator of type double, // a counter of type integer, and line of type String. // Initialize all number variables to 0. double accumulator = 0; int counter = 0; // Create a local variable called difference of type double. double difference = 0; // Write a loop that continues until you are at the end of the file. while (true) { // Convert the line into a double value and subtract the mean, store the result in difference. difference = input.nextDouble() - mean; // Add the square of the difference to the accumulator. accumulator += Math.pow(difference, 2); // Increment the counter. counter += 1; // Read a new line from the file. if (!input.hasNext()) { break; } } // When the program exits the loop close the input file. input.close(); // The standard deviation is calculated by taking the square root of the accumulator divided by the counter. return Math.sqrt(accumulator / counter); } }FileStats.java Numbers.txt 87.5517\r 72.14015\r 88.24248\r 60.524\r 65.38684\r 94.48039\r 84.73287\r 84.74978\r 73.78996\r 73.43895\r 88.87511\r 102.14769\r 69.58979\r 67.28837\r 86.2944\r 82.68129\r 88.12874\r 88.25387\r 66.99109\r 74.20329\r 75.20197\r 67.44766\r 54.10776\r 80.44553\r 68.16631\r 84.39538\r 67.81337\r 75.03716\r 60.58003\r 92.52126\r 86.4458\r 79.34192\r 66.26862\r 76.81226\r 86.69747\r 73.23652\r 85.20477\r 69.32324\r 75.90384\r 64.52881\r 92.67207\r 77.68945\r 94.40487\r 84.61558\r 91.14814\r 76.60865\r 80.32715\r 59.5361\r 68.06308\r 101.0122\r 77.05959\r 78.53418\r 72.97878\r 69.59589\r 76.22583\r 77.37863\r 80.31115\r 72.04924\r 61.23763\r 92.23593\r 85.58184\r 70.29112\r 80.44833\r 88.47428\r 85.27953\r 88.48561\r 73.9378\r 100.60825\r 59.43866\r 95.63389\r 88.03861\r 75.43641\r 100.30752\r 71.94514\r 75.63399\r 52.73916\r 77.02126\r 85.45881\r 73.65227\r 57.60761\r 72.68636\r 88.25708\r 65.64637\r 64.44595\r 95.05124\r 69.06917\r 73.7882\r 73.38605\r 76.63733\r 74.02492\r 68.56522\r 91.23228\r 65.43385\r 91.52846\r 97.97465\r 69.50513\r 80.97369\r 76.70801\r 72.54716\r 63.96352\r 92.94309\r 80.43712\r 74.55941\r 70.93657\r 69.48795\r 82.32683\r 65.41493\r 72.70078\r 86.15723\r 78.17032\r 68.84073\r 88.1814\r 83.88829\r 77.46975\r 65.51234\r 76.33697\r 65.86152\r 75.86517\r 85.74803\r 66.14806\r 73.99188\r 85.78606\r 76.7588\r 90.02813\r 101.65673\r 74.09176\r 73.91821\r 81.38637\r 71.37843\r 75.43858\r 74.64254\r 84.10398\r 114.38159\r 78.18766\r 86.2572\r 94.53111\r 76.38961\r 80.4253\r 64.12608\r 85.31756\r 74.40215\r 97.38476\r 70.87722\r 76.4422\r 69.86757\r 92.41648\r 67.60469\r 88.81843\r 87.43865\r 85.58257\r 81.11809\r 65.22183\r 101.44213\r 78.42945\r 77.66831\r 84.52499\r 92.88413\r 81.02256\r 67.69401\r 57.24612\r 68.51544\r 79.67629\r 73.78531\r 65.63023\r 78.14929\r 51.54538\r 94.24651\r 81.91614\r 82.3721\r 103.39007\r 92.89474\r 79.94447\r 81.0693\r 81.57511\r 72.61689\r 81.00382\r 90.33603\r 79.04321\r 80.7864\r 74.13121\r 69.58506\r 64.496\r 70.29208\r 73.33788\r 72.81388\r 79.10752\r 87.84578\r 90.25121\r 87.53426\r 72.553\r 75.9346\r 60.64172\r 81.63648\r 69.49212\r 76.96347\r 61.99534\r 86.42832\r 76.95493\r 79.26333\r 89.12718\r 99.74034\r 77.8477\r 69.8862\r 85.25492\r 79.06482\r 93.40826\r 84.5583\r 69.95399\r 76.85548\r 80.91593\r 77.26504\r 68.46829\r 66.35421\r 81.71502\r 73.42009\r 83.90602\r 96.3103\r 75.63198\r 83.59876\r 78.69415\r 95.9398\r 96.58408\r 88.66255\r 73.57865\r 80.43553\r 74.05519\r 72.64541\r 95.59291\r 90.56399\r 73.3472\r 75.41113\r 78.17261\r 57.84296\r 82.26169\r 83.19847\r 75.36786\r 69.30778\r 75.05681\r 71.9977\r 66.38932\r 91.56929\r 93.46911\r 81.77321\r 74.69226\r 56.82533\r 83.61781\r 72.17707\r 89.91236\r 100.68164\r 69.07241\r 62.78266\r 63.37612\r 81.05872\r 71.7273\r 74.83659\r 75.0551\r 71.49785\r 72.16406\r 63.85455\r 80.12693\r 74.26601\r 89.64922\r 83.05272\r 86.76446\r 75.59279\r 81.95292\r 84.97659\r 73.41007\r 81.09152\r 76.5587\r 72.61876\r 83.91188\r 69.17833\r 77.07083\r 99.88031\r 77.87578\r 99.61758\r 95.39488\r 83.14628\r 83.63299\r 71.92619\r 90.95537\r 77.43279\r 82.86112\r 68.86039\r 75.80596\r 96.04804\r 65.69435\r 83.72006\r 82.61719\r 68.27025\r 69.27987\r 72.08785\r 60.18323\r 88.30673\r 76.45574\r 91.40705\r 73.63181\r 78.07249\r 89.8367\r 66.85215\r 72.93442\r 69.1339\r 67.73282\r 68.69734\r 78.87906\r 71.45822\r 82.34976\r 71.67506\r 79.29054\r 76.91899\r 86.95784\r 91.06281\r 81.97375\r 68.82657\r 81.14504\r 79.20632\r 78.64948\r 82.19453\r 81.20853\r 95.34467\r 104.56158\r 83.52156\r 94.07847\r 74.05733\r 80.20349\r 74.55424\r 65.09192\r 72.06974\r 69.99781\r 75.78107\r 78.10377\r 75.42934\r 79.5421\r 86.62532\r 58.95268\r 76.42016\r 72.85267\r 82.33916\r 88.78188\r 94.36632\r 74.64514\r 70.5574\r 73.32353\r 78.41411\r 83.77247\r 85.13666\r 72.21294\r 83.64432\r 87.69978\r 67.53804\r 66.42723\r 54.00055\r 62.14697\r 82.07149\r 77.8067\r 75.8406\r 69.52774\r 94.02145\r 89.30705\r 85.92263\r 78.28182\r 80.48545\r 68.58899\r 67.4721\r 90.43034\r 84.00413\r 85.0175\r 44.71618\r 88.12366\r 95.03469\r 82.67003\r 62.07251\r 84.87225\r 77.53349\r 83.76287\r 76.42027\r 60.2768\r 86.92689\r 63.44531\r 61.54058\r 68.77069\r 77.35217\r 83.38997\r 70.3601\r 79.92947\r 89.80893\r 78.87269\r 82.39104\r 87.7386\r 88.2649\r 65.4076\r 73.33734\r 93.76012\r 70.30768\r 75.81361\r 75.10605\r 78.96974\r 68.94816\r 72.18088\r 79.43778\r 77.31248\r 70.12531\r 70.62408\r 77.72661\r 91.88511\r 67.64608\r 72.63825\r 79.47922\r 64.63572\r 71.48359\r 69.91007\r 69.17051\r 78.99053\r 67.64923\r 87.73377\r 85.60784\r 92.80034\r 86.3011\r 63.84468\r 86.17702\r 81.92014\r 55.63154\r 81.89322\r 85.91154\r 86.33087\r 68.07467\r 68.63603\r 78.89047\r 74.27233\r 87.36377\r 85.98682\r 75.37642\r 74.47025\r 88.92111\r 78.80473\r 67.15876\r 83.37338\r 78.77868\r 91.65696\r 83.38635\r 74.54059\r 82.14471\r 86.00333\r 55.67753\r 83.86297\r 79.05625\r 96.75644\r 85.0393\r 71.38097\r 84.87369\r 68.32439\r 69.36899\r 80.59316\r 62.86841\r 89.36822\r 69.49796\r 47.6238\r 80.93911\r 73.81582\r 57.11009\r 92.11345\r 80.81128\r 63.79579\r 72.05084\r 78.95413\r 92.6166\r 66.89008\r 59.55594\r 72.79631\r 72.82051\r 87.69878\r 86.92689\r 85.43215\r 47.22046\r 72.69373\r 73.58304\r 85.28244\r 74.80413\r 69.55453\r 77.70305\r 63.67533\r 89.73054\r 75.31116\r 81.48995\r 64.16906\r 58.10234\r 65.69463\r 71.98867\r 83.58436\r 85.33454\r 70.04077\r 85.79984\r 71.66328\r 78.08033\r 70.30881\r 76.47101\r 94.63828\r 68.75525\r 76.87674\r 74.22978\r 84.29078\r 69.56829\r 55.87965\r 70.06556\r 80.0197\r 83.36456\r 85.00499\r 79.79979\r 64.6724\r 94.67481\r 77.62\r 104.17462\r 76.56814\r 85.11861\r 78.61995\r 66.76692\r 54.70858\r 76.62502\r 66.05544\r 93.61503\r 90.90752\r 78.43702\r 78.50822\r 85.42764\r 79.04288\r 85.35606\r 81.86842\r 79.22298\r 92.03489\r 67.23125\r 74.94177\r 65.41809\r 86.39753\r 84.94775\r 80.80982\r 74.84131\r 73.42201\r 71.95065\r 72.46564\r 69.40997\r 65.84071\r 67.03539\r 91.64547\r 82.74834\r 72.407\r 73.76084\r 79.49976\r 93.08785\r 99.16845\r 64.78642\r 77.68263\r 69.29093\r 72.85402\r 81.48026\r 82.24329\r 75.86003\r 50.07202\r 90.95609\r 77.86649\r 83.70484\r 78.28241\r 90.80515\r 96.67001\r 74.71155\r 81.19311\r 86.18529\r 85.19409\r 94.77288\r 68.70846\r 77.99023\r 71.09352\r 72.01224\r 93.88858\r 66.39731\r 108.16772\r 89.11154\r 90.49782\r 73.45777\r 78.05073\r 75.41266\r 102.78278\r 70.44176\r 72.76786\r 67.77646\r 91.90371\r 81.1168\r 68.24555\r 95.85365\r 87.3994\r 76.18831\r 74.28549\r 58.40058\r 70.74346\r 89.21252\r 73.14\r 85.26236\r 73.72171\r 55.65867\r 68.13267\r 62.53153\r 97.1035\r 68.26307\r 64.90585\r 82.59003\r 76.11455\r 84.7724\r 87.1102\r 84.50413\r 71.00085\r 84.30132\r 66.11939\r 81.55091\r 90.2962\r 83.37557\r 81.42657\r 81.02477\r 63.63357\r 83.86796\r 88.10934\r 94.07655\r 83.25519\r 74.66213\r 81.36303\r 73.29894\r 84.35661\r 74.40992\r 55.93404\r 82.0424\r 91.09862\r 81.55538\r 90.61225\r 76.99226\r 62.71857\r 70.31378\r 77.79526\r 65.43094\r 93.00764\r 74.02198\r 83.45183\r 92.06534\r 84.66298\r 70.28505\r 71.00747\r 83.34534\r 68.75469\r 62.55317\r 95.45285\r 64.42049\r 68.96137\r 84.23874\r 69.19829\r 78.13228\r 67.05108\r 78.53336\r 77.18261\r 62.4269\r 64.84816\r 82.87273\r 76.10655\r 83.6609\r 66.32081\r 81.03482\r 78.51663\r 88.79446\r 75.39731\r 93.50918\r 77.44056\r 74.53417\r 81.31862\r 74.77859\r 80.88832\r 79.14863\r 85.71134\r 67.24864\r 87.80289\r 71.02678\r 74.10971\r 72.65117\r 92.15472\r 69.73331\r 72.54897\r 76.30901\r 81.2087\r 62.58771\r 71.06274\r 90.10096\r 90.49937\r 79.33953\r 92.88483\r 79.33784\r 64.11756\r 62.71725\r 68.92862\r 91.80586\r 80.04256\r 92.89169\r 76.92555\r 70.89619\r 73.05649\r 88.79214\r 79.26786\r 81.14043\r 72.16213\r 81.70249\r 82.52719\r 59.68572\r 74.8431\r 75.41958\r 85.40738\r 67.96581\r 72.75867\r 72.76078\r 71.10687\r 81.93236\r 60.86003\r 95.40893\r 59.01815\r 65.78431\r 82.10035\r 79.45528\r 69.51953\r 89.02178\r 76.43021\r 74.18797\r 94.96259\r 83.63341\r 74.62827\r 66.26081\r 85.73128\r 74.98954\r 96.56393\r 74.76603\r 77.07909\r 74.5225\r 81.00303\r 94.104\r 76.26313\r 84.72333\r 91.74209\r 71.57884\r 62.49655\r 55.36445\r 75.25479\r 79.0894\r 81.56684\r 82.59395\r 84.44273\r 81.85679\r 56.89617\r 77.14106\r 64.89257\r 86.10429\r 74.45051\r 71.79143\r 68.09839\r 85.50318\r 73.09867\r 79.2719\r 61.2204\r 80.23852\r 85.39248\r 77.8346\r 92.35623\r 88.17469\r 76.03963\r 75.22819\r 72.1128\r 89.75153\r 88.48878\r 74.483\r 63.60158\r 80.96112\r 77.41708\r 77.52862\r 69.61437\r 70.83596\r 101.27058\r 54.62198\r 86.86363\r 75.55546\r 70.28591\r 74.47699\r 75.42748\r 86.47153\r 77.50398\r 92.15863\r 81.45264\r 75.79767\r 77.70988\r 77.04747\r 82.2304\r 102.50114\r 71.40915\r 86.91291\r 51.58468\r 95.04895\r 69.71296\r 74.78601\r 80.36455\r 77.89165\r 92.90732\r 65.55564\r 79.75681\r 79.52761\r 80.02519\r 91.52732\r 88.22623\r 76.9676\r 53.37983\r 90.69627\r 80.37364\r 65.41354\r 76.57261\r 74.14232\r 88.5079\r 83.34644\r 57.22147\r 91.38161\r 58.58738\r 71.50948\r 88.6317\r 68.6086\r 81.81283\r 66.86435\r 76.16675\r 66.84146\r 77.87635\r 71.69464\r 55.17959\r 106.02085\r 67.20885\r 87.4162\r 77.29979\r 100.03413\r 85.30442\r 77.00892\r 74.85296\r 77.26145\r 82.10246\r 75.89888\r 91.0946\r 74.20703\r 97.16579\r 70.97175\r 79.0962\r 79.82704\r 72.79812\r 92.80312\r 82.96146\r 75.1204\r 76.07238\r 67.08509\r 79.56175\r 67.50765\r 53.32561\r 89.86578\r 68.13133\r 66.96257\r 75.62011\r 74.59297\r 90.55384\r 81.11784\r 81.67835\r 81.12704\r 84.69442\r 91.58952\r 87.25312\r 84.51619\r 85.50882\r 68.24079\r 72.81798\r 73.60998\r 84.553\r 76.09972\r 88.68947\r 80.73149\r 81.12175\r 76.72117\r 71.79116\r 83.04685\r 62.83925\r 77.24642\r 80.97798\r 73.63677\r 62.10111\r 72.89574\r 70.48059\r 77.69268\r 84.31595\r 94.50601\r 76.73663\r 70.01291\r 67.32829\r 93.16113\r 72.62911\r 77.03782\r 93.81534\r 86.54442\r 57.06529\r 75.27489\r 70.65611\r 82.76782\r 86.97033\r 74.41734\r 76.70717\r 94.6768\r 72.76343\r 104.51675\r 76.72325\r 86.33595\r 68.47243\r 72.67889\r 75.82451\r 79.6325\r 75.07563\r 73.20489\r 65.76886\r 60.5179\r 78.78835\r 76.08582\r 82.25869\r 94.84087\r 83.66436\r 60.93015\r 66.78569\r 84.02248\r 92.28458\r 62.1047\r 89.06031\r 67.53559\r 72.46335\r 96.81629\r 68.95666\r 71.28671\r 71.76765\r 75.07554\r 76.51966\r 78.84945\r 83.23548\r 78.37175\r 70.71386\r 70.14238\r 72.03713\r 77.17427\r 76.94761\r 90.5625\r 59.60918\r 72.09315\r 65.11261\r 69.76326\r 85.01179\r 87.80602\r 85.01315\r 61.25843\r 86.34914\r 70.01398\r 60.53063\r 89.60063\r 75.19235\r 80.72417\r 98.89949\r 71.10524\r 79.61011\r 77.27004\r 67.90437\r 80.52359\r 75.32259\r 83.42956\r 70.55176\r 81.48076\r 74.46681\r 73.83649\r 81.42178\r 90.51921\r 60.13337\r 63.50138\r 63.24661\r 75.02934\r 78.31694\r 82.2752\r 76.91705\r 88.5679\r 72.52321\r 77.68759\r 72.02995\r 63.22963\r 74.44467\r 78.5192\r 79.24452\r 82.13974\r 71.3815\r 85.55526\r 84.33526\r 77.94066\r 76.77014\r 78.08522\r 80.95285\r 72.32361\r 74.64712\r 86.23888\r 78.59892\r 87.23297\r 73.29069\r 76.87515\r 84.31809\r 80.45177\r 80.73499\r 80.18719\r 82.36517\r 87.87335\r 91.19618\r 78.61116\r 91.57345\r 90.95272\r 85.13843\r 77.58738\r 73.45501\r 63.91337\r 75.47032\r 66.50846\r 84.06341\r 75.29289\r 72.7699\r 77.35314\r 67.52649\r 54.30485\r 80.4313\r 97.3771\r 90.73978\r 72.31282\r 69.68987\r 85.5218\r 95.07595\r 75.73264\r 89.11485\r 86.8044\r 94.05266\r 71.07354\r 87.98383\r 83.69341\r 71.62435\r 86.50924\r 60.79498\r 93.89001\r 91.44885\r 80.06758\r 70.87183\r 68.79365\r 67.37485\r 66.85618\r 69.84459\r 81.60107\r 79.52939\r 78.94811\r 83.89742\r 66.76571\r 62.51248\r 91.41008\r 85.66299\r 91.85483\r 81.25548\r 81.23217\r 60.55608\r 70.12068\r 77.10656\r 85.30817\r 67.73176\r 81.94856\r 77.87556\r 79.58542\r 67.46597\r 78.10539\r 67.65488\r 87.55176\r 80.89476\r 63.18069\r 89.42723\r 70.90595\r 79.52877\r 75.20933\r 77.15914\r 68.00399\r 74.50924\r 79.863\r 73.90679\r 72.49342\r 65.24536\r 77.38876\r 65.40271\r 82.80653\r 81.07618\r 64.05383\r 76.47835\r 72.31269\r 72.55358\r 65.50772\r 69.93418\r 83.83459\r 70.67977\r 76.78484\r 80.61589\r 84.95045\r 73.88115\r 78.07585\r 74.95301\r 81.39512\r 90.92415\r 70.2662\r 84.50418\r 56.12627\r 90.83744\r 56.33198\r 55.65303\r 86.1408\r 77.76714\r 66.01274\r 93.65414\r 78.62558\r 63.4806\r 102.85264\r 89.67878\r 77.8708\r 72.59261\r 82.39275\r 72.6641\r 80.97637\r 80.96668\r 86.82793\r 79.39367\r 76.33777\r 69.61465\r 79.99578\r 74.41428\r 61.74447\r 101.92494\r 87.3626\r 81.53741\r 89.67458\r 75.75711\r 76.2776\r 71.94232\r 75.5781\r 84.89828\r 97.41488\r 91.39156\r 84.95621\r 88.86885\r 81.76318\r 79.55394\r 91.46951\r 80.52128\r 70.0674\r 77.55598\r 78.50798\r 93.6977\r 86.26837\r 91.04288\r 77.44093\r 64.21304\r 64.61628\r 82.17105\r 73.30521\r 81.55434\r 86.62379\r 98.23051\r 79.24374\r 84.49018\r 87.08791\r 59.23518\r 70.64158\r 78.59835\r 74.31415\r 65.11137\r 85.48066\r 89.52913\r 66.99514\r 81.9238\r 78.37156\r 76.29078\r 78.62542\r 82.19709\r 95.17667\r 84.17411\r 84.92686\r 70.61576\r 71.00588\r 70.282\r 73.67213\r 86.75329\r 82.29944\r 83.27174\r 90.0928\r 95.80382\r 77.13536\r 73.48602\r 69.35307\r 73.1504\r 80.13593\r 77.12132\r 80.73709\r 71.38892\r 72.35886\r 57.66515\r 67.64501\r 94.58148\r 69.9491\r 74.15477\r 84.03821\r 63.18038\r 73.29531\r 62.88269\r 62.70046\r 98.03653\r 77.40759\r 73.9882\r 78.10108\r 67.75776\r 77.73323\r 89.65433\r 94.3124\r 76.509\r 84.10045\r 71.18225\r 74.83351\r 89.65418\r 72.02244\r 69.31568\r 91.84013\r 71.547\r 83.16068\r 77.9907\r 71.90254\r 69.49828\r 88.21252\r 94.79328\r 72.59327\r 73.40059\r 78.24902\r 85.08828\r 85.75646\r 86.36055\r 70.45611\r 64.44989\r 89.22995\r 61.78284\r 79.00266\r 65.93448\r 72.63816\r 65.56731\r 61.16426\r 80.05777\r 68.403\r 86.67345\r 85.67802\r 72.13204\r 69.65935\r 78.06922\r 86.31211\r 77.92229\r 84.12742\r 95.01593\r 85.79737\r 84.72764\r 82.85776\r 72.54761\r 71.31667\r 74.26795\r 69.78701\r 79.86632\r 84.64638\r 80.06189\r 79.00369\r 71.56246\r 62.85036\r 77.24162\r 76.26584\r 88.26437\r 54.6891\r 89.2083\r 65.89823\r 64.11439\r 84.37365\r 75.69169\r 74.73818\r 76.32141\r 60.57304\r 82.76461\r 93.26318\r 88.95439\r 90.89721\r 90.96262\r 80.72261\r 75.79292\r 71.64523\r 72.62403\r 64.01729\r 55.17475\r 75.08391\r 83.07756\r 89.16827\r 80.40366\r 62.0584\r 73.27787\r 76.86528\r 52.63006\r 63.72886\r 77.45107\r 73.85847\r 79.17935\r 84.27775\r 89.33206\r 84.69207\r 87.98743\r 91.0306\r 76.34612\r 50.005\r 80.3425\r 66.55016\r 92.55184\r 78.6308\r 62.89835\r 92.89865\r 73.12208\r 70.25888\r 78.20564\r 84.92975\r 60.24296\r 68.34725\r 80.97193\r 82.0999\r 93.63584\r 83.1594\r 76.80643\r 61.85692\r 65.01718\r 66.92663\r 73.89072\r 93.58374\r 74.61919\r 69.25879\r 80.19341\r 89.28439\r 74.91575\r 62.19095\r 82.63517\r 75.9662\r 75.55715\r 72.12601\r 95.70854\r 78.22071\r 84.65793\r 82.27919\r 79.23137\r 81.95512\r 72.64029\r 64.85908\r 74.36251\r 75.93575\r 79.02261\r 91.18194\r 71.6328\r 78.80828\r 73.72022\r 60.62256\r 88.84339\r 78.23454\r 91.5436\r 92.0605\r 59.80725\r 73.91109\r 76.80218\r 75.74708\r 93.29324\r 81.05699\r 72.41994\r 61.12427\r 68.94054\r 83.59305\r 60.62298\r 76.71793\r 72.38314\r 84.53024\r 88.1672\r 86.25456\r 74.38036\r 67.05879\r 77.62426\r 92.05224\r 69.12863\r 73.90614\r 72.95976\r 83.15389\r 93.23235\r 76.04581\r 68.35319\r 78.73714\r 95.26654\r 77.65402\r 76.85666\r 68.94662\r 71.32969\r 68.83322\r 68.7203\r 86.11246\r 71.18457\r 95.13971\r 58.60664\r 77.13415\r 85.1445\r 68.40967\r 71.90266\r 71.08416\r 82.55547\r 72.93714\r 97.63465\r 82.89071\r 71.79693\r 78.48863\r 79.12301\r 80.77995\r 65.18414\r 69.53478\r 71.85316\r 84.02319\r 68.27006\r 69.70579\r 63.29578\r 67.22721\r 88.27539\r 80.68251\r 57.81294\r 82.23838\r 71.86818\r 84.1308\r 66.62139\r 88.6034\r 71.43951\r 84.01766\r 74.92186\r 94.62991\r 86.6664\r 78.68829\r 76.70759\r 89.51023\r 79.13245\r 85.53641\r 79.40075\r 80.97254\r 60.70303\r 67.84134\r 79.35888\r 96.52985\r 81.64811\r 63.97546\r 93.0766\r 64.3103\r 63.89099\r 60.4567\r 71.29032\r 65.22241\r 61.03633\r 80.52162\r 87.26259\r 69.22054\r 77.56612\r 62.52617\r 90.82867\r 75.17704\r 83.24836\r 87.44989\r 77.18961\r 80.73307\r 61.36981\r 73.20214\r 65.60051\r 70.3341\r 81.13301\r 73.98139\r 84.84819\r 72.74833\r 69.33431\r 79.39233\r 97.26758\r 71.50671\r 66.35525\r 70.82195\r 63.4789\r 86.8369\r 84.71827\r 75.0634\r 63.37901\r 82.69659\r 75.059\r 69.48986\r 66.99944\r 101.46429\r 79.03554\r 53.13544\r 78.75328\r 79.30266\r 81.36466\r 64.30267\r 62.11677\r 63.64082\r 77.29173\r 77.86965\r 55.00324\r 81.7236\r 70.04848\r 88.80027\r 80.38401\r 77.06068\r 78.85449\r 85.08577\r 88.66831\r 86.44669\r 83.16241\r 80.62866\r 97.94318\r 70.54929\r 90.62189\r 75.29753\r 78.89969\r 74.1739\r 76.99361\r 74.0119\r 77.19365\r 73.05837\r 71.53182\r 75.30515\r 83.12169\r 78.24815\r 69.55854\r 76.75972\r 73.26779\r 90.69361\r 83.99505\r 77.52811\r 77.9704\r 73.09404\r 68.79002\r 82.88062\r 87.51853\r 90.28885\r 87.08096\r 74.55743\r 78.97351\r 57.8813\r 89.93696\r 93.52619\r 81.64376\r 58.57664\r 87.81355\r 77.42358\r 72.76965\r 69.70348\r 66.28002\r 87.71327\r 83.17485\r 73.61218\r 81.52852\r 77.96741\r 91.44127\r 87.43363\r 64.85005\r 76.40631\r 66.79116\r 59.98242\r 55.28449\r 69.83314\r 71.91849\r 77.02058\r 85.56898\r 51.51544\r 102.47277\r 55.46754\r 72.64793\r 85.78865\r 95.85045\r 86.84998\r 71.81106\r 59.68313\r 62.54821\r 71.35158\r 96.90637\r 80.68485\r 57.68944\r 91.81627\r 93.00116\r 72.584\r 94.52368\r 65.24657\r 79.57093\r 79.98905\r 67.97266\r 79.88812\r 77.49205\r 73.63753\r 75.76553\r 92.07279\r 86.31972\r 70.14921\r 68.43497\r 73.2138\r 87.26513\r 59.65546\r 63.18837\r 60.17008\r 70.35747\r 81.69604\r 70.98093\r 78.71066\r 77.57499\r 75.89509\r 67.96861\r 75.54139\r 83.35108\r 69.18376\r 75.63429\r 88.91833\r 82.07375\r 72.60395\r 87.2036\r 66.15319\r 72.75515\r 67.18855\r 89.3786\r 75.10462\r 64.14664\r 85.10051\r 89.81193\r 104.22581\r 68.99024\r 56.54902\r 65.72735\r 71.91815\r 57.72726\r 71.51099\r 76.241\r 69.53789\r 70.94183\r 81.31445\r 85.18315\r 80.02679\r 83.37214\r 78.9718\r 60.79864\r 67.47375\r 67.94049\r 78.93767\r 64.87602\r 88.04097\r 75.87608\r 71.75657\r 62.77978\r 77.69776\r 63.6911\r 84.0756\r 57.8851\r 83.34901\r 80.77912\r 92.70461\r 77.95839\r 71.67517\r 70.82772\r 74.85194\r 88.22851\r 92.70894\r 67.22244\r 73.93199\r 69.68989\r 90.18592\r 81.01947\r 79.29065\r 74.12768\r 85.11827\r 60.86207\r 77.42993\r 93.5244\r 75.19347\r 63.10598\r 71.66532\r 69.02188\r 77.48878\r 79.58563\r 69.96657\r 83.22714\r 76.77111\r 80.48774\r 74.56851\r 71.05303\r 72.14795\r 95.81448\r 70.81617\r 86.19718\r 64.97506\r 74.98219\r 93.75892\r 71.88717\r 89.7976\r 79.94228\r 79.99061\r 78.99961\r 89.93819\r 75.91033\r 61.24504\r 86.6596\r 70.34993\r 84.37162\r 92.50575\r 76.24659\r 90.18562\r 73.28392\r 65.09008\r 65.94165\r 76.23176\r 74.65192\r 77.37783\r 72.83506\r 77.93596\r 75.09627\r 99.83449\r 82.61589\r 64.6474\r 74.19729\r 87.98207\r 86.97369\r 73.22796\r 81.40673\r 90.36871\r 84.39774\r 71.81669\r 86.85089\r 63.67915\r 78.02564\r 76.18042\r 71.29639\r 81.30513\r 81.15447\r 75.65187\r 57.39099\r 68.05442\r 85.1127\r 63.63414\r 82.74865\r 88.19911\r 83.57037\r 100.19715\r 84.12066\r 73.72735\r 75.58333\r 70.45536\r 83.77788\r 80.98573\r 82.50583\r 64.54117\r 77.16978\r 84.47345\r 64.74095\r 74.95468\r 93.04544\r 71.00031\r 72.97789\r 85.11013\r 76.82858\r 86.11074\r 75.33274\r 72.1078\r 69.27369\r 70.09559\r 64.03588\r 71.50014\r 84.64618\r 63.61386\r 65.27492\r 78.05415\r 76.59973\r 77.07185\r 75.16982\r 86.57617\r 77.33332\r 75.14309\r 95.2456\r 86.78811\r 75.65545\r 75.32207\r 87.39688\r 64.21725\r 72.5183\r 92.70402\r 73.22921\r 76.03847\r 73.35159\r 69.68823\r 67.1884\r 69.58643\r 74.04974\r 91.91449\r 80.97751\r 74.39448\r 83.70599\r 72.08734\r 85.13916\r 67.92012\r 86.12487\r 89.27484\r 91.91781\r 69.61901\r 71.99363\r 67.83156\r 68.26912\r 68.65122\r 73.64185\r 69.06619\r 85.65158\r 73.54699\r 77.20973\r 81.32311\r 70.04452\r 69.86096\r 73.81614\r 66.05185\r 73.32769\r 86.74462\r 70.42466\r 95.40001\r 89.38088\r 88.24837\r 73.1474\r 70.28131\r 79.85117\r 73.23549\r 85.43732\r 93.99461\r 93.27424\r 82.42719\r 73.49777\r 50.731\r 64.26937\r 69.80397\r 91.58853\r 85.03861\r 79.27964\r 77.41419\r 65.68233\r 103.5806\r 71.81575\r 66.82389\r 76.89817\r 79.93476\r 71.55509\r 80.88937\r 81.53524\r 91.8201\r 71.75466\r 78.55212\r 78.7544\r 62.78628\r 80.50475\r 71.0641\r 85.12677\r 66.89686\r 82.62896\r 77.30226\r 84.16126\r 77.94482\r 74.22983\r 48.54693\r 97.33252\r 68.93638\r 85.56201\r 76.39694\r 81.09886\r 69.39441\r 72.94515\r 74.6721\r 67.66778\r 76.2836\r 75.06008\r 69.03843\r 77.37435\r 59.74802\r 99.70785\r 66.82596\r 97.01207\r 87.21704\r 95.21274\r 76.60569\r 60.22117\r 82.30134\r 71.43596\r 73.17989\r 72.70401\r 81.24097\r 71.48668\r 84.22352\r 68.12119\r 79.20828\r 87.44619\r 75.13205\r 63.14282\r 86.62223\r 63.18539\r 82.099\r 77.3923\r 97.78007\r 74.19579\r 85.81576\r 66.47251\r 97.90209\r 93.16432\r 75.42338\r 74.60319\r 71.19334\r 63.38432\r 81.32799\r 58.55908\r 65.33194\r 70.16438\r 64.61792\r 71.30604\r 59.54436\r 83.77759\r 69.53628\r 62.10133\r 66.97737\r 88.10323\r 83.40343\r 88.00685\r 70.54115\r 62.88813\r 78.83322\r 72.85465\r 101.11176\r 68.77166\r 75.05464\r 79.36636\r 76.55622\r 85.70121\r 71.93375\r 64.20207\r 67.45855\r 65.91901\r 66.38352\r 50.39633\r 84.75471\r 72.47579\r 93.11742\r 80.98176\r 70.68854\r 75.13279\r 88.30081\r 67.36909\r 71.84834\r 85.82212\r 77.40334\r 74.53495\r 76.98956\r 65.31407\r 69.99211\r 66.88967\r 58.87796\r 69.28372\r 74.96961\r 87.17889\r 81.91579\r 69.13166\r 95.59312\r 75.81318\r 66.81428\r 95.31337\r 70.86038\r 76.27653\r 46.15056\r 64.74466\r 88.61223\r 88.2354\r 85.02894\r 75.75618\r 79.15912\r 79.71804\r 87.97143\r 70.60301\r 70.75886\r 68.85943\r 60.46628\r 74.86774\r 74.66303\r 78.14973\r 83.94448\r 66.62921\r 64.03663\r 77.60795\r 55.78799\r 96.26119\r 88.04583\r 61.33679\r 81.15492\r 73.16168\r 75.51413\r 80.57335\r 67.95203Numbers.txt "},"JavaLabMoney.html":{"url":"JavaLabMoney.html","title":"Java Lab Object","keywords":"","body":"Java Lab Object Chapter 6 Lab Programming Money.java package JavaLabMoney; // Objects represent nonnegative amounts of money public class Money { private long dollars; //A number of dollars private long cents; //A number of cents //Constructor creates a Money object using the amount of money in //dollars and cents represented with a decimal number public Money(double amount) { if (amount amount.dollars) { value = 1; } else if (this.cents amount.cents) { value = 1; } else { value = 0; } return value; } // Write and document an equals method. // The method compares the instance // variables of the calling object with instance // variables of the parameter object for // equality and returns true if the dollars and the cents of the calling // object are the same as the dollars and the cents of the parameter object. // Otherwise, it returns false. public boolean equals(Money otherObject) { if ((this.dollars == otherObject.dollars) && (this.cents == otherObject.cents)) { return true; } else { return false; } } // Write and document a toString method. // This method will return a String that looks like money, // including the dollar sign. // Remember that if you have less than 10 cents, // you will need to put a 0 before printing the cents so // that it appears correctly with 2 decimal places. public String toString() { if (this.cents CreditCard.java package JavaLabMoney; // I will create my CreditCard file. // It should have data fields that include an owner of type Person, // a balance of type Money, and a creditLimit of type Money. public class CreditCard { private Money balance; private Money creditLimit; private Person owner; // It should have a constructor that has two parameter public CreditCard(Person owner, Money creditLimit) { this.creditLimit = creditLimit; this.owner = owner; // The balance can be initialized to a Money value of zero this.balance = new Money(0); } // It should have accessor methods to get the balance and the available credit. // Since these are objects (pass by reference), we don’t want to create an insecure // credit card by passing out addresses to components in our credit card, // so we must return a new object with the same values. public Money getBalance() { return new Money(balance); } public Money getCreditLimit() { return new Money(creditLimit); } // It should have an accessor method to get the // information about the owner, but in the form of a String that can be printed out. // This can be done by calling the toString method for the owner. public String getPersonals() { return owner.toString(); } // It should have a method that will charge to the credit card by adding // the amount of Money in the parameter to the balance if it will not exceed the credit limit. public void charge(Money amount) { if (balance.add(amount).compareTo(creditLimit) Address.java package JavaLabMoney; //Defines an address using a street, city, state, and zipcode public class Address { //The street number and street name private String street; //The city in which the address is located private String city; //The state in which the address is located private String state; //The zip code associated with that city and street private String zip; //Constructor creates an address using four parameters //road describes the street number and name //town describes the city //st describes the state //zipCode describes the zip code public Address(String road, String town, String st, String zipCode) { street = road; city = town; state = st; zip = zipCode; } //toString method returns information about the address public String toString() { return (street + \", \" + city + \", \" + state + \" \" + zip); } } Person.java package JavaLabMoney; //Defines a person by name and address public class Person { //The person's last name private String lastName; //The person's first name private String firstName; //The person's address private Address home; //Constructor creates a person from a last name, //first name, and address public Person(String last, String first, Address residence) { lastName = last; firstName = first; home = residence; } //toString method returns information about the person public String toString() { return(firstName + \" \" + lastName + \", \" + home.toString()); } } MoneyDriver.java package JavaLabMoney; //This program tests the money class. public class MoneyDriver { //This is a driver for testing the class public static void main(String[] args) { final int BEGINNING = 500; final Money FIRST_AMOUNT = new Money(10.02); final Money SECOND_AMOUNT = new Money(10.02); final Money THIRD_AMOUNT = new Money(10.88); Money balance = new Money(BEGINNING); System.out.println(\"The current amount is \" + balance.toString()); balance = balance.add(SECOND_AMOUNT); System.out.println(\"Adding \" + SECOND_AMOUNT + \" gives \" + balance.toString()); balance = balance.subtract(THIRD_AMOUNT); System.out.println(\"Subtracting \" + THIRD_AMOUNT + \" gives \" + balance.toString()); boolean equal = SECOND_AMOUNT.equals(FIRST_AMOUNT); if(equal) System.out.println(SECOND_AMOUNT + \" equals \" + FIRST_AMOUNT); else System.out.println(SECOND_AMOUNT + \" does not equal \" + FIRST_AMOUNT); equal = THIRD_AMOUNT.equals(FIRST_AMOUNT); if(equal) System.out.println(THIRD_AMOUNT + \" equals \" + FIRST_AMOUNT); else System.out.println(THIRD_AMOUNT + \" does not equal \" + FIRST_AMOUNT); } } CreditCardDemo.java package JavaLabMoney; //Demonstrates the CreditCard class public class CreditCardDemo { public static void main(String[] args) { final Money LIMIT = new Money(1000); final Money FIRST_AMOUNT = new Money(200); final Money SECOND_AMOUNT = new Money(10.02); final Money THIRD_AMOUNT = new Money(25); final Money FOURTH_AMOUNT = new Money(990); Person owner = new Person(\"Christie\", \"Diane\", new Address(\"237J Harvey Hall\", \"Menomonie\", \"WI\", \"54751\")); CreditCard visa = new CreditCard(owner, LIMIT); System.out.println(visa.getPersonals()); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Credit Limit: \" + visa.getCreditLimit()); System.out.println(); System.out.println(\"Attempt to charge \" + FIRST_AMOUNT); visa.charge(FIRST_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to charge \" + SECOND_AMOUNT); visa.charge(SECOND_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to pay \" + THIRD_AMOUNT); visa.payment(THIRD_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); System.out.println(\"Attempt to charge \" + FOURTH_AMOUNT); visa.charge(FOURTH_AMOUNT); System.out.println(\"Balance: \" + visa.getBalance()); } } "},"JavaLabArray.html":{"url":"JavaLabArray.html","title":"Java Lab Array","keywords":"","body":"Java Lab Array Chapter 7 Lab Programming Average.java package JavaLabArray; import java.util.Arrays; import java.util.Scanner; public class Average { // This class will allow a user to enter 5 scores into an array // The array which will contain the scores private int[] data; // The arithmetic average of the scores private double mean; // The constructor will allocate memory for the array. // Use a for loop to repeatedly display // a prompt for the user which should indicate that use. // The constructor will then call the selectionSort and the calculateMean methods. public Average() { this.data = new int[5]; Scanner scanner = new Scanner(System.in); for (int i = 0; i this.data[maxIndex]) { // Swap the index of found maximum number with the index of assumed maximum number maxIndex = unsortedIndex; } } // Swap the found maximum number with boundary number int temp; temp = this.data[maxIndex]; this.data[maxIndex] = this.data[boundary]; this.data[boundary] = temp; } } } AverageDriver.java package JavaLabArray; //I will create my AverageDriver file. It only contains the main method. //The main method should declare and instantiate an Average object. // The Average object information should then be printed to the console. public class AverageDriver { public static void main(String[] args) { var average = new Average(); average.calculateMean(); average.selectionSort(); System.out.println(average.toStrong()); } } CompactDisc.java package JavaLabArray; //This program creates a list of songs for a CD by reading from a file import java.io.*; public class CompactDisc { public static void main(String[] args) throws IOException { // This is relative paths. // You would also use absolute paths. FileReader file = new FileReader(\"src/JavaLabArray/Classics.txt\"); BufferedReader input = new BufferedReader(file); String title; String artist; //Declare an array of songs, called cd, of size 6. Song [] cd = new Song[6]; for (int i = 0; i Song.java package JavaLabArray; public class Song { private String title; private String artist; public Song(String title, String artist) { this.title = title; this.artist = artist; } public String toString() { return title + \" by \" + artist + \"\\n\"; } } Classics.txt Ode to Joy Bach The Sleeping Beauty Tchaikovsky Lullaby Brahms Canon Bach Symphony No. 5 Beethoven The Blue Danube Waltz Strauss "},"JavaLabString.html":{"url":"JavaLabString.html","title":"Java Lab String","keywords":"","body":"Java Lab String Chapter 8 Lab Programming Time.java package JavaLabString; //Represents time in hours and minutes using //the customary conventions import java.util.StringTokenizer; public class Time { //hours in conventional time private int hours; //minutes in conventional time private int minutes; //true if afternoon time, false if morning time private boolean afternoon; //Constructs a cutomary time (12 hours, am or pm) //from a military time ##:## public Time(String militaryTime) { // The StringTokenizer allows you to break a string into tokens. StringTokenizer tokens = new StringTokenizer(militaryTime, \":\"); //Check to make sure something was entered if (militaryTime == null) { System.out.println( \"You must enter a valid miliary time.\"); } // Check to make sure there are 5 characters // CONDITION TO CHECK LENGTH OF STRING else if (militaryTime.length() != 5) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } else { // Check to make sure the colon is in // the correct spot // CONDITION TO CHECK COLON POSITION if (militaryTime.charAt(2) != ':') { System.out.println(militaryTime + \" is not a valid miliary time.\"); } // Check to make sure all other characters are digits // CONDITION TO CHECK FOR DIGIT else if (Character.isDigit(militaryTime.charAt(0)) == false) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } // CONDITION TO CHECK FOR DIGIT else if (Character.isDigit(militaryTime.charAt(1)) == false) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } // CONDITION TO CHECK FOR DIGIT else if (Character.isDigit(militaryTime.charAt(3)) == false) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } // CONDITION TO CHECK FOR DIGIT else if (Character.isDigit(militaryTime.charAt(4)) == false) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } //SEPARATE THE STRING INTO THE HOURS //AND THE MINUTES, CONVERTING THEM TO //INTEGERS AND STORING INTO THE //INSTANCE VARIABLES else { // Add lines that will separate the string into two substrings // containing hours and minutes. // Convert these substrings to integers and save them into the instance variables. hours = Integer.parseInt(tokens.nextToken()); minutes = Integer.parseInt(tokens.nextToken()); //validate hours and minutes are valid values if (hours > 23) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } else if (minutes > 59) { System.out.println(militaryTime + \" is not a valid miliary time.\"); } //convert military time to conventional time //for afternoon times else if (hours > 12) { hours = hours - 12; afternoon = true; System.out.println(this.toString()); } //account for midnight else if (hours == 0) { hours = 12; System.out.println(this.toString()); } //account for noon else if (hours == 12) { afternoon = true; System.out.println(this.toString()); } //morning times don't need converting else { System.out.println(this.toString()); } } } } public String toString() { String am_pm; String zero = \"\"; if (afternoon) am_pm = \"PM\"; else am_pm = \"AM\"; if (minutes TimeDemo.java package JavaLabString; import java.util.Scanner; public class TimeDemo { public static void main(String[] args) { Scanner keyboard = new Scanner(System.in); char answer = 'Y'; String enteredTime; String response; // In the TimeDemo class, // add a condition to the loop // that converts the user\u0019s answer to // a capital letter prior to checking it. // CHECK ANSWER AFTER CONVERTING TO CAPITAL while (answer == 'Y') { System.out.print( \"Enter a miitary time using the ##:## form \"); enteredTime = keyboard.nextLine(); Time now = new Time(enteredTime); System.out.println( \"Do you want to enter another (Y/N)? \"); response = keyboard.nextLine(); answer = response.charAt(0); } } } SecretString.java package JavaLabString; import java.io.*; import java.util.Scanner; import java.util.StringTokenizer; public class SecretString { public static void main(String[] args) throws IOException { int count = 0; String display = \"\"; // Read the file secret.txt // This is relative paths. // You would also use absolute paths. FileReader file = new FileReader(\"src/JavaLabString/secret.txt\"); Scanner input = new Scanner(file); String sentence = input.nextLine(); StringTokenizer tokens = new StringTokenizer(sentence); // You should process the tokens by taking // the first letter of every fifth word, starting with the first word in the file. // These letters should converted to capitals, // then be appended to a StringBuffer object to // form a word which will be printed to the console to display the secret message. while (tokens.hasMoreTokens()) { sentence = tokens.nextToken(); sentence = sentence.toUpperCase(); if (count % 5 == 0) { display += sentence.charAt(0); } count++; } System.out.println(\"Secret: \" + display); } } secret.txt January is the first month and december is the last. Violet is a purple color as are lilac and plum. "}}